package main

import (
	"encoding/base64"
	"errors"
	"fmt"
	"io/ioutil"
	"net"
	"net/http"
	"os"
)

// GetLocalIP 获取本机网卡IP
func GetLocalIP() (ipv4 string, err error) {
	var (
		addrs   []net.Addr
		addr    net.Addr
		ipNet   *net.IPNet // IP地址
		isIpNet bool
	)
	// 获取所有网卡
	if addrs, err = net.InterfaceAddrs(); err != nil {
		return
	}
	// 取第一个非lo的网卡IP
	for _, addr = range addrs {
		// 这个网络地址是IP地址: ipv4, ipv6
		if ipNet, isIpNet = addr.(*net.IPNet); isIpNet && !ipNet.IP.IsLoopback() {
			// 跳过IPV6
			if ipNet.IP.To4() != nil {
				ipv4 = ipNet.IP.String() // 192.168.1.1
				return
			}
		}
	}
	err = errors.New("get Local IP fail")
	return
}

func CheckBizStatus() (bool, error) {
	url := fmt.Sprintf("http://10.10.10.164:%s/v1/heart_beatq", "9806")
	resp, err := http.Get(url)
	if err != nil {
		fmt.Printf("err:%s", err.Error())
		return false, err
	}

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// handle error
		fmt.Printf("err:%s", err.Error())
		return false, err
	}

	fmt.Println(string(body))
	return true, nil
}

func main() {
	ipv4, err := GetLocalIP()
	if err != nil {
		fmt.Printf("err:%v", err)
	} else {
		fmt.Printf("ipv4:%v", ipv4)
	}

	//
	mac := GetLocalMac()
	fmt.Printf("mac:%v", mac)
}

func test() {
	enc := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSWQ1akNDSFZPZ0F3SUJBZ0lKQU0vTjByd3VKTXduTUFvR0NDcUJITTlWQVlOMU1FMHhDekFKQmdOVkJBWVQKQWtOT01ROHdEUVlEVlFRSURBWkNaV2xxYVc0eER6QU5CZ05WQkFjTUJrSmxhV3BwYmpFTk1Bc0dBMVVFQ2d3RQplbVJzZWpFTk1Bc0dBMVVFQXd3RWVtUnNlakFlRncweU16RXlNVE13TkRFNE5EQmFGdzB5TkRBek1qSXdOREU0Ck5EQmFNRlV4Q3pBSkJnTlZCQVlUQWtOT01SQXdEZ1lEVlFRSURBZENaV2xxYVc1bk1SQXdEZ1lEVlFRSERBZEMKWldscWFXNW5NUkF3RGdZRFZRUUtEQWQ2Wkd4NkxXbGtNUkF3RGdZRFZRUUREQWQ2Wkd4NkxXbGtNRmt3RXdZSApLb1pJemowQ0FRWUlLb0VjejFVQmdpMERRZ0FFWEJqZ1ZQTjU3R1J3RkJhQWJja3JIKzZkc1B5ajZ0L3VXVjRICkVJbzN6VStacFZCdlNnTGlFRWt1S3ZhVUdVQmtYZ1pxMlVnemJoNDBVR0pjSXhrZ09hT0NIQkl3Z2h3T01Ba0cKQTFVZEV3UUNNQUF3Z2dwR0JoQXJCZ0VFQVlQWU9RdWR5V1VCa3FzQkJJSUtNQmFDQ2l3MWIzZ3dXWGxMVW1sQwpUVWRxYVhSVWFUZGpRV3BZTkZvclJYSjZNRk5GVERkQ1MxVkxkREJIYzBOR2VtRktha3hQV0ZKRk1qRndVemRRClZVWjFPRmgxV25sek5YZENZMnRKVVdGWVdrWjVhQ3RVYW14M1JEZ3hPRGtyVldwQ1ptczJhamRhYWtJMlJ6Z3cKU0dzMFkzWlpjVmhoV2xwUFQxVnRMMmwyVmtOWWJHOUdjbnBDV0cxdlNsWXpNbGxOYjB0dlVqRnBWbGRNVFUxbwpSakpUZFdKSlMycFpZV0V6VjNCclpFOHlMMjlUVGtOQmRIYzNXVUZNTTB4VlVXZFNaV2MyY1RRclEydFlObFJUCk9WWnJNM1lyYlZaaVpIaDNhbkZVTTJ0R1QwOXBXRkZGTWxsaVFYWXJSRTlZYzBFelVrWlJhbVpSYTBGNWRVVmEKY25JM0swSndObEJyWm5Gd1V6aFRTMUpzYUhSck5tOUhlWFJYYVdkcWMwMHJkSFpFWkV4Q1YxcFRMMU01YTAxMApSeXQ1U2l0MmFsVlVNM1ZaV1cxemVXNWxSbmhLUTNZclIwOXZkVk5hT1RkUVFrVjBWMk5UV2s1ck5qUndTRTFDCk1XVTFORmRpYkhkV1ZVUnNaMVJHVFRKbVFrcFpNbHB4YTI1clNuVnJUMU4wUm0xSGJHdzFiMmszTlcxblZIcHkKZWtWblpVeFFUbFZQZEV0Tk0xUkRLeXRaVW14NlpXbERXVUZPVVVKMlZtZENkalptV0c1TWNXaE5SVU5WV0d0UQpTblZSUkVSd1JGWTBlV05RTlZGelNTdE9NSFZOTVRZeFRGZ3lNV1prV1M5a1RXRnNlVWd2TTA5MmVERlJaMUJNCmFFYzBhblE1VURkcFFVVXpZa1oxWkZOUE1qSmFOR0Z2YlZCeGFqQXhkMWwyTlRWcGJVeFZiakZxYlRkSVZERkYKVUc1U01uTnFla2xNWjB0NmRsaExWMnRzSzJZNFpVOVJWVWN3TTJObWNUVm1aM05vT0dORlMyRjZWVk5tVEZaTQpMM1pxWlRkMVZIZE9jVTlaZEZwdVYwcGlUbmhOUVRSSFpXeGhSbU5TSzFaVlFsaDJWazltUW5OcFYxcHVlV1pxClVWVk9SRkJxUlRWdWVuRTJVR2xUUWpjelNscEtRV1ZIVVV4TU5VOTVZa2hOUlRoYVV6Rm9NMFZvYVdGck0xZEIKY0dsMmVsWTVUVEphY0RaaFF6RTVTa0ZIWW5Rd1JERnhWek5pZW1zMVZsa3hiSG8zZEdWdVowTk1aRlZzYTJoNQpPV0pxWm1rM05IaGpkSGwyT0ZoeWRFVTBUMUJxUzFnMWVEQjBLMFZ4WjBjd1dFUlBha293TWl0NGVFdHFMMEpWClZsRjVaR0ZMT0VKSFNUUlFLMUJxVm1aRlZuYzNSMWx0SzFRM1V6QjBlSFZFVDA1aVEzRjVNbmR0VFhSbVlrMXYKUWpWWU0yUnRaRkp1ZDFSVE9HZ3pOaXQ2YTIxSFRsSTVURU5XYWpjM1VVc3JTSHBHT0VFMVQxUjJhVUp4ZG01NQpWV0Z5TkdKamVGTlZXRTU0U1doUlJuYzNNSGs1TkZsRWREQkhiMUpNU0hrMVRWUlVhVUp4WW5sdU5GUm9iWFZFCmRURkhZMFJ0Y0d0Nk5rSXdVRW95TlZONFFURkJjRk55TUdwM1RIZHlSM2sxVTFsWUszQmhUamN2SzNaSVVrUjYKYkd0Q2NuWnlibWRWYVRsSmRIQlVZbEZyU1d4WVJURnZNWEZpVVhRNEsycDZSVlEzSzFaSGJWcDFSUzkzUzA0MQpiRW96WWtGdVQwaE1OMmhDS3pKWldEUkZTRXA1YVRaT2QzSnhTVlZzUjBrd2IzaENjM05YZVdwMmQwWkhlVEF6CmFXdGxjbEo2T1VzemMxbHBWUzl6VkU0MFVqa3dSalp2VW5acmRsVTNZMkp5VVhKR1RrVnNSV3N3Y0NzelRqUlEKZDBoVk5UZ3hhbU5sTkM4NU5GVTFaeklyVEZZNFVXbHZPRE15Ym1WclQxUnpOV2x5WnpsWk5rMXBNRkJRYjBVeQpia3hXT0hSRGR6ZGFORTFoU1haS01HeDFWazgxTVZwbWQycHBiRzFEV1ZaYWJWSTFjemgwWVZjeWRYTjVURFV5CllsUkZUV05JWlRjelpsSkllREpzVTBsdlp6Y3JURTFZTjFacFdESjNXVFpMU2t4TmVrRmxRMXBWTnpORlpreDMKVlhOQmFHaG9iM293TjFwUE1HVXZjbXBRZUZGVVUxQk9lRlZ6Tm1FM2F6Rkdha0pEZVhCd09HdzBUVVFyUjFCVQpVWGxyZFdWVVUxcElSbWhVUTFBdmMxbDBURWxyYWpWRE1FZG9NMFJ3ZUZreWNXUTFTRk50YVZjd2NqaHdNVGRvClUzWnVhbXhKVEZablNHUlFZbnBVTjNsd2JETnZkVVpCTDNsWFlYSXJhbTkyU1dsTFJtMDRkMWcyTHl0WmNFZFQKVTNBeGEwbzRVazkyVlhOME1GVkZiSEJtZUVwVGVsSXJWMmxoZUhKTllsTm9NRmd4WjJkQlYxVkVSbXRtVTBjMgpTRVI1UkdKc2EweHRkWEZqV1VOWlNuZG1RazFaYmxWRmJHNURhMDVsVERGQ2JsTnFUVk5OV0RWSk9XRmplVmdyClltMWtOek1yZGxwSFJrZG1PVzEwZVRjeFNXTk5URUZ5VlVOVWFXOXpiR0o2YUZFNVpVeHdhVWhWZUdOR05XdHYKSzJJcloxbHZSWFl3VHpKclJ6bENTM3BrWlZWQmNWSk5jbVF2Y0ROelJHMVVVMkpGVkc1NVdtdzBibXB0WVVwdApiVlowYTI4ck5XdFNZbFZyVnpSS1NHTklWMnBNVGtGVlFsaG9RWGd6YURNd2VIRjVRamxFTmtnMFowaEpRamhFClpGQlZjbFJUU0ZwU1ozVmliV3RwVGtwMk1uRk1URXRVY1VwSVdqbE5SVWhrWWpOWEx6aHNhSEF2TlZaRkszQmwKSzJNNVRWRnVRWHB2UjJsaWFVSXhlV3hPUzJWQ2NsZDJRemd2VW1KaVMzZFlRMk5KVFdJdmVqSmhWMVppVURFNQphMEppYTJoWVNsZE1jWGMwYmtoRmNWVjFUamhYVDFnemJEZERkMlJtYW1Kd2VuTnlRemc1VVZKUk1GZFROMFZxClRIUnZjbGRhVlVveE0yNTVhVzVvWmpSaU5DdG9WMjlPYnpoWVpGSXJXUzgzVm5Sd09GcFRXRTFLVTJGSllreGsKTTNCaldraHRkbWxqWnk4NVluQXZVVWRIVVdWM2NFSnRTbkZTZGxwSk1IZEpObFJ3TDFOM2QxWnNORFZ6YkVOdQpjaXRpUjIxbVNFRmFaMjVtWVRSSVRrNXRVR2xZUlhOUmN5OTRiMFpXVEc5dVNtZzRMMFozTmxNek9IUXJVRlJWCk4wWnFWelJyVEN0Qk5GWm5ka055WW5sTGVYbE9TQ3RIY0dsWlJqSkRNeTlGWW5KSFQzZ3JXVU01ZEhVdlQzWlYKZWpGSU5IcElWVmsxYW5OSE4yVnZUVlZRUVdKdVVWZGFSbk5PTXpKRFJVRm5VREJZTlhGQ2RsTkRkVUptZEVnegpOWGxvV0cxMFFUSlVSaXRxVEVzeVMydGxiVnAzYjNsWFdIcElSbEZJTDJOUmMxSTJReTlJZUZSNk9FVjBSV05WCllVOHlaVlZ2V20xMVZtSTJNbkZHVGk5dE5HWm1ObkZTVkdWeEt5OXlObFZLZDBvd2JGTTRXazByWVhSVVpHcFMKU2xWWWFIaHJjWEI0WWpkYWFrcGhkVEZHYXl0MlN6WnlWbFJGTkVoSVZFdHJLMFJHTjNsRVMxTkxOVWhTTm01bgpablEyUzJ0MUwxQjBiWE16YWxKQlNsUk9hbUUwWW5Ca1RrVldTME13YldkelkxbHdVRVl5YkZKeWRWa3JPVkZaCllVVjBlSGMyVDJnM09UUklVQ3R3WVVSbWFISlJUbTlrTVRONVNTOHJRekJxZVRkV2QwSkVNa1JaY1VseWRYZHQKVlZkRVJXUlpPWEJySzFwR0wwcHhaVmhPU0hnclJuTk9VREZ0TUU1V1RGSnFRWEphUldRdlZISk1aRVpDVmpOUApVVFpoV0dRdmJWWTRaazVLTW1Sa2JqaDRjRE5rV1RGSmNrdEZaVWxSY1hwTFpEVk9jemxIYlhoU2FGcHpiVEZXClJsSTBZek55WlZKeWExY3llamxZUkVkd1MzbHdPVXRHZW5KaGRFNVBZMDVZVDJGNmFGSk9UblpNTTBoSGNuRTMKVFRCcmVUbFVTSEZaWjFOclMzZE1VRlUwTVRCRGJqTTFVelpRU0hGTVVIVlZjM1p4YTJJMWVHaFljR2xsTkZCcgpkamgwTW5kYVFuVkZaamx0Vlhkc1NEQlZNbUpIZEZvelN6ZG5TekZHVkN0UWF6WktTeXN6VW5salptUlFaVGxqCmRrZGFiakJMYjNabldVZEhiWFp5UnpSM1QwUkJXVEJPVEhWbFpYbENTVTVpYkRsU05IaFFLMWsyZDNwRlYxVXoKVFZWQ1NUWm9USEF3U214c1EwMVlTM1YxTTAxWE0yTm1TVFZzTVhaT2NHaDVOQ3RIY0RndlRHRXJiWGRyU1VKNgpiejB3Z2hGcUJnd3JCZ0VFQVlQWU9SV1M2MHdFZ2hGWUZvSVJWRGh5V1RCbU4wdDJWRzlYZWtGTGFtMHJWbXhGClNuWnlhbFZpYTFWcVRqQkRTVVZUYUZsbFpsRm5VbWxHUTBOVmVrNW5RWEJXYWtGcU1HbE9OVWR0VG1aSGRHMU0KYVZoVU1GRjJTVVlyVG1kalUxTlNkWEI1VVhGWEwyWkViSG80YWxwUmQyMDVVa3BTZVRaeGVrUjRkMWhyTVhWTwpNR042VW1wNVpIZ3djVzVZVWl0NlJ6bDFWVVZVUlc1b1ZXZGlURkJKUTFWSWVraExXSEprVkVGbVQzZEJSekpUClJrdEZSbXB5VlVWR2JESnlSMFUwVTFsSk1XWllVVTQ1YUhaUVkyWTJUM0Z6ZDIxWFlWZFZNbGROVTBORlZ5OTIKWkVWMWEzaEpTMXBCVFhwMFZ6aFZVbUptWlRGaE0xQnZTSGwxVWxKUVIxcHlWbVI1V25GWVlYUlViRGhQUTA5TwpjVEpWYzBSSVVFUnVOSGR0SzBkUldUTk9TRmxFUkZBeGVFVk5UVUZrTnl0RWNWWjZWMWgyU2tFMVVEVTNWRUZ2CmExWmlkVmwxVVZCTlVXNW1aazFWY0RBcmRtRTNlVmxzVW1GUWRsWlFiRGg2TkVsMVZtWmhOQzlyY0VNeEx5c3cKVlhrclRUYzRZblJVT0ZkVldpOHlURWxzU0ZvMFZFZHJiRlZETHpSc2FVMXRNMlUzV21vck1qTmxha05ITkc1QwpPR1phV1dWVVV6TjZOV2htT1d0RlVtaDVSamRYU0VOeVVtbFVSR0pIV2xWcmNUZG1VR3hYVkZScGMwNWpOVFZvClVtVnNRekkwV205VFNISlRjRzB6ZEZGWk4yNWFNVXR6UWxWWWFsRlBTRkZHYmpONlltRkpXVGhEZFZVM1JIbFMKWlV0d2JFaG1iRzEwWVdSMGExZzJjbGRUYWtWMllqZDVRVkJ6TTNKSVZXeGFjVzVqV2psdVYyNUlVRkJCVTBOcQpaVk5hVVZObUwyNVhLMGgyUVVOS1prTmhRMkZ4UW5sblUwOTFaa2R5U25vM2FYcEpVVEJZUkRSMlQwc3pNVEpECldtSTNNVk5MVWtwMFFUZG5SMGhSTDFRcmNYcDViSFl2V2tWVFNsZHhTUzgyTVhOVVZGbE1jazF2WlZwck5FczAKVUU1bVp5dFVUMDg1ZW1KVFVHZ3JlbTB5WjFwbVpHWXJOamRNT1hCWWJXWjNSbEJ1VW1rMkwwNVBabGs1YXpSSAphVmwyY214MUsydFFURlk0UkhCakwwTnhZbFZpT1c5c1pVdEJaMWh3Y0VJeFJqTllkekZyZW1GRU9EbHdOekk0ClRUaDRLMUp3UTBvMlRXUmthVTQwWkhRM1RqaE5lRGxVZVc5aE0ySlFhR1ZwWVV0UFZqSmxXazlyVkVKU2JYRXIKWTFReVVETXJiWGRVVVZkSFNXMUJjVWx0UXpoelFYRTFSR0ZaYTBsbmRqRjJUR3Q1VERGUGVHWmFPREo1WWpsYQpjRE4zWTBwV0wzQmtXR3AwZW1kc1JUQjVRVlJHTVV4dlVVaEplbGRUVUhBMGNGaGxWbWRTT0djeVEwTnJZUzkzCk5HcE5TRmx5UzJsUFVUUXJjbWRUWTNoVE1taGxObTByYkd0TGQxQlFieTl2VFhCUlZGRjZZemhPYTIxamVHY3cKVDFoNWNuWkdUV0phWkZZck5teHlhMFZqTUZwc09XWjVXVkpIVW10eGRtUTNTRVpZS3pCWGIwcEJXVTlRTmtOVApWRGwxUzJKV1FqQkhkSGhqVlVVelJrWktZMVpMUjBKRGVHUXZjR3c0WTNwR09VUkpObVVyUVhwbFVFOVdURUpyClEwZENiMW93UlU5R1NXczNiVTVNWWtGcFZISktVR3RxVkN0VVpVWnFOa3RKVjJZelNrVkpTblZrV0ZCdVRVWkYKYzJzcmVVRXhWRWxaTUdsdFVtbDZUWHA0ZGtGdlFXbHhWMVpWZEVsdU1IZFlSVXBuUmxBeFNIQXdVWHBKVGs1cwplWGd3WmxoSmRuVkhUREZOV0V0RFMyVkJiMlZOTm1KWU9XY3hUVk5oUjBRNVQweFpXV3QwZEU5MmR6UnFORkJrCkwwZG1Ta0ZtY2sxMldHSk9iQzkyWkdka1VHSnRaRTU1UVRVd2NVTXZhMVpGTlVveldHZElVVWRzT1M5NFJVWngKTUhoaFRsVnBTekYwVm0xSFVUTjRNV1JQZEdRd2NubHRUR294WVhGS016WndSakpwTldoamNqUkpVamRHUzFKVgpNV0pXWVdac2VrWjZSWFpuVG1waVNFaHdRbkY1Tmsxa1NqbE1NVTEzUlc1Mk0wWmxNV3MxVTBKMGQwRXJTVWwxClMxUTNha0pwYkdSbVMzRkpNMU5CVGxaVGVVTkhhWGxpYlVKM1REUmplRVJ2Vmt0Q1dXb3lNa1ZSV25OVU9ISnIKU0U1YVVtZElTakJzVjNsR1ltVTRUMkpOTjA1RVlVVnBhMmt3YW1kYU1YVnBhVTByWW1vd2FsSkhXVU4zZWl0aQpOSHB1TVRoNmRVRm5Zbk5TWkZOTlEwTlliVkpTY25wS2FqTTFRakJ4WWxObFdHMXlWbUpxZEhGdUwxcFlkVXBwClYwRkdTbFZNTkZObGMxQk1iRVlyTTNrM1FrWlJTR2hTU1VNME9WUlRUVk5CTjNnMFFUUkpLMk5wU1hFck1HRm0KUmtGak5uZEZVbGQxZWxWSWJUWnNNMmxoTlRCVmJEaExRWFJsWkhCQk5WUkpNVkUxWVU5TVRDOHJRMFJ6YTNwaQpORlJUTDFOTVlWVkplbUZaY3psQlpVaFphWEF6UkZkWGRFdHlhRXhtYWtSaU5tNXNaVlY1TTFselZtc3JVelpJCldGRmtjVnBYUVRVeVN6TlFjM1p1VEhJeWFHNWxOMUpNVlRsNlNUSjRkSGxYWnpBMlZ6WlFlblpCUkV4NVlYRXgKWlRKaVVUZ3piMjByZEVKR1MxQTNkRzFEVVRoaGFIbDRNVkJsVjNCUlNYZDBOMVl5ZG5CTldrSlBURTk2UXpNcgpNWFZhV2pKNGJXY3ZiR2xSVFhnd2FIbEtjbVpaVm5sWlVYUjJOMlZ4VEhCcFlrbFVWbmRVVXpoVlQybDFhMVYwCmFUbGpTaTg1UlVWdEszZzVSbXhJVlM5UE16bEpZamhZUm1oSWVXWnhUMmhGVmtaVGRqWnNhbXBSZWpkQ2VTOUsKT1hKWVdIUkVia3RrYms5R1pHbERjMG96UkRSUFpUUmFRV2RXV205RldpdHRTRTVxWlVjNGVWcGxXR3h3VFRoSQpUVUpOVFRjd04ydDJWekkxU1VGTldYRTVWMFJ1U0hGYVJFOXJPWFpNYVZCUGExQTVUbmwyUmpKcVprUnhZMk5QClJUbDFPVmQxYWtacmEwOW9aMk4wTDNKTk5XOVVaR1J3T1RSRVVHZ3daV0pHZWpkSVIyZE1jMlptVEZwMVVVNWwKZUhoSWIyMVBUekZaVTNSMFlYbFphblpzU1c5b2FVVktRVXRWVkV4Q1NTOXFkbkJzYjA0d1dWRlVZV040Y0hkeApVRFJ3U0dSWGNGazNkVXd4TUZGMmVGUndWeXMyVldGWFdIVXhkRGRqUkZOQlVFUm9ZM2d6U1ZoUk1HRjRlbUZJClUyd3pTQ3RXUmxwT2NEQmFZa2hhTjFobFEzRm1UbGRuYkUxeVJ5OHpkV2xJUWxCVmRFTkVVemhRYURWc2RDOTEKVmtkamRESllOazFXUWxKeFJTczFiMHBwT0hOQll6ZGFkM2hPTVhKbVEzbHlkVVpoY1dVNFkwbE5XVGh6U1hWTApUM1JIZFdnd09XaFpObVpXVVVzeGFUQkRhVU5yWkVsMmRIZzJNRFozVERkRFkwRk9SM1ZDZDNoR2FDdFRXR0paClNEazNhMHAzTkVOTVRtTk1lV04zZWxaVFdHMU5lRWtyYm5wU0sxRTVLMnBQWmxSdk5XSkZhVzFhZWxwSVZ6UTAKU1RWRGVHcGlibGRETUVsTFlXTmtPRVl4WTJGNU1uZHhNWGxzWVdSUGVWcEdNblZFZG1kamFGZDBXSHBYVkdOSQpMelJOUTFGbVRUVndZMGxVUjFGbVNWbENTMFl2YlhjMlQxWmtSMlZPU0c4MGNVeGFXSGhhT1ZGV2NXaGlSMWx5ClMyNWtZbXhZYmpCelZYWnBZMFJFZFV0QmRUTjFOaTlZYUhwQmFIRndlVmc0YzFSTVNVRmpVVGhaYmtocFJISjAKWVRCSFJrczRPR0pGYW5BeFIwUjVNM1EzTUcxa1RGWlJSVTV5TkhSTEszSnVTVlJDU0VoQ2VuTTFWVXRQY2prMwpZM2syYmxwc1dqRTRRbUpPZW5KdVMyRlNXakZLUzBKUU1VMVZlbEZLTkVoNWFsbGFXRWhUZW5VMmNIVkZha05OCkswcHhRbEpTY0UxT1p6VnBWR3BTWm1nM1VteDBZbVoxVTBWWVVXNTFVVVF6UTJGalZVNVRPRFp1Ym14ck5tdEsKUkZOb2RHaExXVFJqVkZOT2JsTTJLeko2VGxJMFlqWnphVE1yV2xCNlYya3ZURWRSUmxCV2MyUlVPVmRzWmpWTgphRUZEZGpreVNVVXpNazFYWWxONmRuTjNTVlkwWmpnclpUaHpUbEYzZVVKRFNqbERiMGhNYldsWVduaFlSWEJqCloxTllLMlpWZW0xM2JHcE1kMjlXZDFjd09EZFdUMWxtT1d0UlZVSm9SbVI2VDIxeGNYSlhkMVJyUzNVdmVWZG0KYzFBeVJWaFZURWwzU1ZOTFVtRjVWV3hXTW1STlVWaGhZWEUwV1c1WFlYa3hjRk51VEhRNVl6Vk9OMUJNU0UxSAplbFpuY0hBeFlrZHFWbFZVUlhaeFN6QkJSSFZPV0RNeVVuWlFTVTVPVVhsYWExZFZVell5YjA5NUsxcGFSVmRQClkzZzBUWEZwVFdveWFIaDVZWHBxTXl0eVFrWTBWMFl6UVZCSWQzSlFhalphWlhCMWNtdEJaV3AxTVdwMFRrMXUKVXpGQ2RrTm5UVUpTWjI1TVNpOWxWREJSYVhOMEx6bEZjRzQwUlUxU1ZYQnRZM1ZxY1hSS1pXRnFPRTFaZVhkRQpLMWt5TUdKVmVHOUxSVmhqU2xoS2VsbFRja3d3Y0hGNFZUbHJWMVI0ZEV4YVprUklielk1UVU5Rk4ybGlVMGxCClpYVlFkSHAyVTNaVVp6ZG1kREp4UVcxRmJITlFNa1EyZVZSdGFYRkhiVFozY0ZWdFZFOVdSbEZpV2xZMGFHaE8KV1ZwWGVtSm5iMU5pVnk4dlJVcFlUbEI1VW5WbmJqbEZZaTlYYkU5U01ITlNVVXNyYWl0MFJubHNabWR2Wm5sMwpWR1p3ZWpjMllUVnVNeXRDYjFKd1ZHdEVWbWt5VTFadlNrSkhSbVpKTDFnM2JqZ3ZZVkpJVnk4M01tNXVjalZ3ClVVUTFSVnA2Um1WcmMxVjZNRUpxVUUxQk1VcHpVbTVxWXpKWGNVSllOVFIyYjFkSFRWTk1abU5WWVRoMlVXZGEKTTNFelVUTmxZMEpDYVZKd1FXUjRaR0ZEVVc1V2JXUlZXV3BoUjNOVGMwWlJTRWhQTmtOclFrVjNOVlExWkdNMApaM1JrTDBKNU9XYzRVVlkyWkhsNlVtMVVXVlkzUVRsck56WktWM1J1VVZOM2NrbDFOQ3RxTmtaUVJFUjFTek5aCkt6QnNiM2RPTkhGbE5VZEZTVkF5YTFoMllWZzBibXBuYmpBMk55dG5ZazFDZVdnNVNGbFRiRk5rYkVob2NIZGkKVm1WVFdYUlhTa1JDVWt4S05rSjFNRTFaVW1ORU9WTlRZblJJZFhacFptOHhVblkwVFM5SWFFazVWRE5DYWpGUApUVzVhV1hwVVFuZDBOV1E0SzJvd1YzTkdkelF4WldKRFpsZHJhMmRHVVhONVNraEZkRWQ2WnpKTGMzSlpVMmhvCmVqUXdUVXBMYTA1M1VFUnhiamwxUm1GTWIwbzJOR3hUY1c5TFNuQnJWWFp3UzJGV2RUSTNiSFpMTTNkck1sWlAKVm5ZclRtSmhhWEowYVVoWGVGSnZXRUZCVDBGWlVHTkhkMmxsYW5rd1VVcEJVSEJJVkU0M2RuQmhZM0EyTDJVcgpXVGhJU2tjck9FNTNaWFJUYmtoSWVVSkRNazV6ZUUxcmJVbHNPVkZpVW1SRmQwZEVjMEY2V1dZMU5sWk1jVzVPClNrdERSRGh4TTBSTlVHSlNOVkJ2TTBRMGEyeDRjM1pYV0Vob0wxZEZXR2RMV0VOcE5UVnBVbUpuUkdJelQwb3IKY1RWcVZVOVdOR0V2YW5aRWFFMVZUMnR5V2xoNmVraEZSRFphZDNSUmFIVm1OWE5YTjBoWVJISTRPR3RsZUdkTgpWa3hNWTJZck4yTkJabEpxZDBnelVqaFhWVXROUW5ack5XNWxNeXRrTm1ZNVRVSlhjV2hTVm13eVFXUm9PWEk1CmF6WTBkMVJOUWpSb1dFeHNjekIwYVc1TVZGaHNjblIzYlZKMVFTOHZLelEwWjBacEt6SlhhVkJTU1VOQ1prdGkKYWl0V1RrVkVRMkZKZGxsUlFqVnVORUk1UldWc00yMDRORUp4SzFKNFN6SlhaVlZKYlU5cVlVd3liSFIyZFZGbQpXV1ZGWldkcVZHeHhMMkp1WjJFclNrUmlURkJqTmpWcVkxbzBOM3A2TjA5RmFYUmthSEJtZFV4MGNWSXZkRnBCCkwxVXZUVGx1YjNaSVZsRlFLMHRrTjA4d2FuUk9VSEJLY1ZSWlRVTXdjVVpwZDJrd1NGaFZRV3h2U2xaeGFXTngKTVZKTlVIQlphbVJhU1RsdVRXaHlZV2hXTDJsRFN6QTBVMlppSzFwT1YwOWxVa3BEY0dsS1UyNWtSbGhhSzBregpjekZxTVZaSWRtRnFNVkJ3WnpOM2VFNXVPVXhqTlhoWFVITjBOVXRoTW1oUU1sVktZV2RRU2pad1RrRmFlR1JRCmJGUnJiVmh5YTBwcGFtbDFhV1V6TkZOcGJXUXhWM1JLVVhWS2NtaGxZVkJWTDFKdVRrcG1iV1ZMTUVOT1RWZGgKZEdOV1IwdENRMjRyWlhoM1JpOUxNV0pTUTJkTWNVUXlNREZQVFVwVU9DOURkVWxOWVdkUWRIUm1RMVZUTlhGbQpjWEZ2TW1nd2RFcDFaWGh6VTJ0d05pdGhLMjlTUzBaclJESkpSU3RPVGxGYWQzTjNhVGhtY0RCelRESTBZa0pNCk9VYzNWMVp4TUV4UFkydEdTR3RPWjA4d1dEWkJPV0ZrVGxoUmVHaDBWMEkyY2xobk1TOXdXRWNyV0V3d055OUIKYVZwdWNYRlFlV1JtUTFCU2VubHZlbk5xU0c4MmFtRk9WVzlJTlV4b1REWmpRV2h5Y25vemFsTndhRFl5UXpSTwplVzFsU1dKRE9WQktNRXhSWmxkT2RWaHRSVk5aUW1Wa05IVXJkRVpzVUdrcmQzWmtNREJyUkVwQ2FrRkJUME5CClozaEdaVXBvTUZwR1QyMVhWVGRhT0dwQlEwVTJkRVI1TlRGRVowWTRiblZtUVZnNGNEWnRNMXB4UlhGNk0xTlIKVVdKbFVuTXJaMkZXWmpkMlR6RlNRbk50UjJKblFVSjZSVkpEVFhBMmVYbE1TR3BPTUNzMlJIZzVNM2wxTDJ4MgpWRTFQVkVKV1IzRXlkV1ZGUlVkMlpsaEJUVXRpVVhkMVVFVldZVnB0YlVkcGRFRmFURlpDYUdkMGNtY3JVazFpClVGUTVXbUUwVDBVM01tVlNiVTVzYTFwaFMyODBVVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVSRVVsVmwKU1dsbFkxbHJUVnBRU1ZoWWNFVlVaME5hWm5KTk5IUnFOMVpPVG1Wd2JVMXhlbGxSVGpOb2FGTkNTRFZsWnowOQpNRWtHQTFVZERnUkNCRUF5TkRka09EYzJZbVppTm1VeE5HTTVPVFJtTlRsbE1XWXhPVEkyTUdJMk5HUmtNbVk1Ck1XVTVNVFpoWVdKbU56VTNObUUxTm1JMk56VmtNbU5tT0dRMk1Bb0dDQ3FCSE05VkFZTjFBNEdBQURCRkFpRUEKNzcrOUZFN3Z2NzFrNzcrOTc3KzllTysvdmUrL3ZSTWtPUk51NzcrOWMwa043Nys5NzcrOTc3Kzk3Nys5NzcrOQpGQXRaNzcrOUJIenZ2NzN2djcwQ0lIYnZ2NzBLWXgvdnY3MDZGZSsvdlJNallBWHZ2NzN2djcxMktPKy92VHdVCjc3Kzk3Nys5d28vdnY3M3Z2NzBlVmUrL3ZlKy92ZSsvdlZNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
	//
	reqBytes, err := base64.StdEncoding.DecodeString(enc)
	if err != nil {
		fmt.Errorf("params error:certRequest decode err")
	} else {
		os.WriteFile("pqc-enc.crt", reqBytes, 0755)
	}
}

func GetLocalMac() (mac string) {
	// 获取本机的MAC地址
	interfaces, err := net.Interfaces()
	if err != nil {
		return ""
	}
	for _, inter := range interfaces {
		fmt.Println(inter.Name)
		mac = inter.HardwareAddr.String() //获取本机MAC地址
		fmt.Println("MAC ===== ", mac)
	}
	fmt.Println("MAC = ", mac)
	return mac
}
