package main

import (
	"encoding/base64"
	"encoding/binary"
	"fmt"
)

func main() {
	//
	randomBytes, _ := base64.StdEncoding.DecodeString("bSvPKFLf8RE=")

	randomInt := uint64(1233)
	if len(randomBytes) != 8 {
		fmt.Errorf("trace_id:%s length of random number which get from kma is not 8, use default random numer 1233.")
	} else {
		randomInt = binary.BigEndian.Uint64(randomBytes)
		fmt.Printf("random number is:%v", randomInt)
	}

	dni := []byte{0x00, 0x00, 0x00, 0x01}

	a := base64.StdEncoding.EncodeToString(dni)
	fmt.Printf("a:%v", a)

	fmt.Println("----------------------------")

	codebooks := ""
	cqk_bytes, err := base64.StdEncoding.DecodeString(codebooks)
	if err != nil {
		fmt.Println(err.Error())
	}

	fmt.Println(string(cqk_bytes))
}
